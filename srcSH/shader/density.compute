#version 460 core

uniform int numParticles;
uniform float smoothingRadius;
uniform float SpikyPow2ScalingFactor;
#define WORKGROUP_SIZE 256
#define TOTAL_GRID_CELL_COUNT 32768

layout (local_size_x = WORKGROUP_SIZE) in;

layout(std430, binding = 2) buffer Densities{
    float densities[];
};

layout(std430, binding = 3) buffer PredictedPositions {
    vec2 predictedPositions[];
};

layout(std430, binding = 4) buffer ParticleIndices {
    uint particleIndices[];
};

layout(std430, binding = 5) buffer CellIndices {
    uint cellIndices[];
};

layout(std430, binding = 6) buffer CellOffsets {
    uint cellOffsets[];
};

uint GetFlatCellIndex(ivec2 cellIndex)
{
    const uint p1 = 73856093u;
    const uint p2 = 19349663u;
    
    uint n = p1 * uint(cellIndex.x) ^ p2 * uint(cellIndex.y);
    n %= TOTAL_GRID_CELL_COUNT;
    return n;
}

float SpikyKernelPow2(float dst, float radius)
{
    if (dst < radius)
    {
        float v = radius - dst;
        return v * v * SpikyPow2ScalingFactor;
    }
    return 0;
}

void main() {
    uint id = gl_GlobalInvocationID.x;
    if (id >= numParticles) return;

    vec2 pos = predictedPositions[id];
    float density = 0;
    
    ivec2 cellIndex = ivec2(floor(pos / smoothingRadius));
    
    // Check 3x3 grid of cells around particle
    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            ivec2 neighborIndex = cellIndex + ivec2(i, j);
            uint flatNeighborIndex = GetFlatCellIndex(neighborIndex);
            
            uint neighborIterator = cellOffsets[flatNeighborIndex];
            
            while (neighborIterator != 0xFFFFFFFF && neighborIterator < numParticles) {
                uint particleIndexB = particleIndices[neighborIterator];
                
                if (cellIndices[neighborIterator] != flatNeighborIndex) {
                    break; // Stepped out of neighbor cell
                }
                
                float dst = length(predictedPositions[particleIndexB] - pos);
                if (dst < smoothingRadius) {
                    density += SpikyKernelPow2(dst, smoothingRadius);
                }
                
                neighborIterator++;
            }
        }
    }
    
    densities[id] = density;
}
